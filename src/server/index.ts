import { app, BrowserWindow, ipcMain, Menu } from "electron";
import { ISettings } from "../model/types";
import { expressHandler } from "./expressHandler";
import { loadSettings, saveSettings } from "./utils/storage";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

let mainWindow: BrowserWindow | null;
const settings: ISettings = loadSettings();

export const restartApp = () => {
  console.log("Restarting Ninja-player");
  setTimeout(() => {
    app.relaunch();
    mainWindow.destroy();
    app.exit(0);
  }, 1000);
};

export const quitApp = () => {
  console.log("Quiting Ninja-player");
  setTimeout(() => {
    mainWindow.destroy();
    app.exit(0);
  }, 1000);
};

const menu = Menu.buildFromTemplate([
  {
    label: "Menu",
    submenu: [
      {
        label: "Disable Auto Start",
        click: () => {
          settings.autoStart = false;
          saveSettings(settings);
          restartApp();
        },
      },
      {
        label: "Restart",
        click() {
          restartApp();
        },
      },
      {
        label: "Quit",
        click() {
          quitApp();
        },
      },
    ],
  },
]);

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 1000,
    width: 1700,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: true,
      allowRunningInsecureContent: false,
    },
    show: true
  });

  Menu.setApplicationMenu(menu);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.on("restart", () => {
  restartApp();
});

ipcMain.on("save-settings", (event, settings: ISettings) => {
  console.log("Recived settings to save :", settings);
  saveSettings(settings);
  restartApp();
});

ipcMain.handle("get-settings", async () => {
  console.log("Get settings");
  return settings;
});

expressHandler(settings);

